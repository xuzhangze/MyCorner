Makefile
cc=gcc

.PHONY:all
all:client server

client:client.c
	$(cc) -o $@ $^ -lpthread

server:server.c
	$(cc) -o $@ $^ -lpthread


.PHONY:clean
clean:
	rm -f client server
  
  
  server.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <unistd.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <pthread.h>

#define _BACKLOG_ 10

int CreateSock(char *ip, int port)
{
	int sock = socket(AF_INET, SOCK_STREAM, 0);
	if(sock < 0)
	{
		printf("socket error\n");
		exit(1);
	}

	struct sockaddr_in server_addr;
	bzero(&server_addr, sizeof(server_addr));
	server_addr.sin_family = AF_INET;
	server_addr.sin_port = htons(port);
	server_addr.sin_addr.s_addr = INADDR_ANY;

	if(bind(sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0)
	{
		printf("bind error\n");
		close(sock);
		exit(2);
	}

	if(listen(sock, _BACKLOG_) < 0)
	{
		printf("listen error\n");
		close(sock);
		exit(3);
	}
	
	return sock;
}

typedef struct
{
	int sock;
	struct sockaddr_in addr;
}Arg;

void* Service(void* arg)
{
	Arg *client = (Arg*)arg;
	for(;;)
	{
		char buf[1024];
		buf[0] = 0;
		int s = read(client->sock, buf, sizeof(buf));
		if(s > 0)
		{
			buf[s-1] = 0;
			if(strncasecmp(buf, "quit", 4) == 0)
			{
				printf("client quit!\n");
				close(client->sock);
				pthread_exit(0);
			}
			printf("client:[%s]:[%d]: %s\n", inet_ntoa(client->addr.sin_addr), ntohs(client->addr.sin_port), buf);
			write(client->sock, buf, strlen(buf));
		}
	}
}

int main(int argc, char *argv[])
{
	if(argc < 3)
	{
		printf("%s [addr]:[port]\n", argv[0]);
		exit(1);
	}

	int sock = CreateSock(argv[1], atoi(argv[2]));
	struct sockaddr_in client_addr;
	bzero(&client_addr, sizeof(client_addr));
	while(1)
	{
		printf("wait connect!\n");
		socklen_t len = 0;
		int client_sock = accept(sock, (struct sockaddr*)&client_addr, &len);
		if(client_sock < 0)
		{
			printf("accept arror\n");
			continue;
		}

		char buf_ip[INET_ADDRSTRLEN];
		buf_ip[0] = 0;
		inet_ntop(AF_INET, &client_addr, buf_ip, sizeof(buf_ip));	
		printf("get connect, ip is:%s, port is: %d\n", buf_ip, ntohs(client_addr.sin_port));

		Arg arg;
		arg.sock = client_sock;
		arg.addr = client_addr;
		pthread_t tid;
		pthread_create(&tid, NULL, Service, (void*)&arg);
		pthread_detach(tid);
	}
	close(sock);
	return 0;
}

client.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <unistd.h>
#include <netinet/in.h>
#include <arpa/inet.h>

int main(int argc, char *argv[])
{
	if(argc < 3)
	{
		printf("%s [addr]:[port]\n", argv[0]);
		return 1;
	}
	int sock = socket(AF_INET, SOCK_STREAM, 0);
	if(sock < 0)
	{
		printf("socket error\n");
		return 2;
	}

	struct sockaddr_in server_addr;
	bzero(&server_addr, sizeof(server_addr));
	server_addr.sin_family = AF_INET;
	server_addr.sin_port = htons(atoi(argv[2]));
	inet_pton(AF_INET, argv[1], &server_addr.sin_addr);

	if(connect(sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0)
	{
		printf("connect error\n");
		close(sock);
		return 3;
	}

	printf("connect success!\n");
	while(1)
	{
		char buf[1024];
		memset(buf, 0x00, sizeof(buf));
		printf("please input:>");
		fflush(stdout);
		read(0, buf, sizeof(buf));
		write(sock, buf, strlen(buf));
		if(strncasecmp(buf, "quit", 4) == 0)
		{
			printf("client quit!\n");
			break;
		}
		int s = read(sock, buf, sizeof(buf));
		if(s > 0)
		{
			buf[s] = 0;
			printf("server:%s\n", buf);
		}	
	}


	close(sock);
	return 0;
}
