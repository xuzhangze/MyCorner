#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/epoll.h>
#include <netinet/in.h>
#include <unistd.h>


#define _BACKLOG_ 10
#define _SIZE_ 20

int Create_Listen_sock(int port)
{
	int sock = socket(AF_INET, SOCK_STREAM, 0);
	if(sock == -1)
	{
		perror("socket");
		exit(2);
	}

	struct sockaddr_in load_addr;
	load_addr.sin_family = AF_INET;
	load_addr.sin_addr.s_addr = htonl(INADDR_ANY);
	load_addr.sin_port = htons(port);
	if(bind(sock, (struct sockaddr*)&load_addr, sizeof(load_addr)) == -1)
	{
		perror("bind");
		exit(3);
	}

	if(listen(sock, _BACKLOG_) == -1)
	{
		perror("listen");
		exit(4);
	}

	return sock;
}
static void service(int epoll_fd, struct epoll_event *events, int size, int listen_fd)
{
	if(NULL == events || size < 1)
		return;
	int i = 0;
	for(; i < size; ++i)
	{
		if(events[i].events & EPOLLIN)
		{
			if(events[i].data.fd == listen_fd)
			{
				struct sockaddr_in client_addr;
				socklen_t len = sizeof(client_addr);
				int client_fd = accept(listen_fd, (struct sockaddr*)&client_addr, &len);
				if(client_fd == -1)
				{
					perror("client_fd");
					continue;
				}
				struct epoll_event event;
				event.events = EPOLLIN;
				event.data.fd = client_fd;
				if(epoll_ctl(epoll_fd, EPOLL_CTL_ADD, client_fd, &event) == -1)
				{
					close(client_fd);
					perror("epoll_ctl");
					continue;
				}
				printf("get connect: addr:[%s] port:[%d]\n", inet_ntoa(client_addr.sin_addr.s_addr),\
						ntohs(client_addr.sin_port));
			}
			else
			{
				int fd = events[i].data.fd;
				char buf[1024];
				ssize_t s = read(fd, buf, sizeof(buf)-1);
				if(s == -1)
				{
					perror("read");
					continue;
				}
				else if(s == 0)
				{
					printf("client quit\n");
					close(fd);
					epoll_ctl(epoll_fd, EPOLL_CTL_DEL, fd, NULL);
					continue;
				}
				else
				{
					buf[s] = 0;
					printf("client:%s\n", buf);
					//strcpy(buf, "HTTP/1.1 200 OK\n\n<html><head><h1>Hello world!</h1></head></html>");
					write(fd, "Hello", strlen("Hello"));
					//close(fd);
					//epoll_ctl(epoll_fd, EPOLL_CTL_DEL, fd, NULL);
				}
			}
		}
	}
}

int main(int argc, char* argv[])
{
	if(argc != 2)
	{
		printf("Uage :[%s][port]\n", argv[0]);
		return 1;
	}
	int listen_sock = Create_Listen_sock(atoi(argv[1]));

	int epoll_fd = epoll_create(256);
	if(epoll_fd == -1)
	{
		perror("epoll_create");
		exit(5);
	}
	struct epoll_event event;
	event.events = EPOLLIN;
	event.data.fd = listen_sock;
	if(epoll_ctl(epoll_fd, EPOLL_CTL_ADD, listen_sock, &event) == -1)
	{
		perror("epoll_ctl");
		exit(6);
	}
	for(;;)
	{
		struct epoll_event events[_SIZE_];
		int size = epoll_wait(epoll_fd, events, _SIZE_, -1);
		switch(size)
		{
			case -1:
				perror("epoll_wait");
				break;
			case 0:
				printf("timeout");
				break;
			default :
				service(epoll_fd, events, size, listen_sock);
				break;
		}
	}


	close(epoll_fd);

	return 0;
}
