#pragma once

#include "compare.hpp"

template <typename T>
void ShellSort(T *array, int size)
{
	assert(NULL != array && size > 0);
	if(size == 1)
		return;
	int gap = size/3 + 1;
	while(gap)
	{
		for(int i = 0; i < gap; i++)
		{
			for(int j = i+gap; j < size; j++)
			{
				for(int k = j; k >= gap; k--)
					if(Less<T>()(array[k], array[k-1]))
						swap(array[k], array[k-1]);
			}
		}

		if(gap == 1)
			break;
		gap = gap/3 + 1;
	}
}

void test3()
{
	int arr[100] = { 0 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	srand((unsigned int)time(0));
	for(int i = 0; i < sz; i++)    //Assign values with random numbers
	{
		arr[i] = rand() % sz;
	}
	for(int i = 0; i < sz; i++)    //print array
		cout << arr[i] << " ";
	cout << endl << endl << endl << "sort:" << endl;
	ShellSort(arr, sz);
	for(int i = 0; i < sz; i++)    //print array
		cout << arr[i] << " ";
	cout << endl;
	for(int i = 1; i < sz; i++)  //check that the sort is correct
	{
		if(Less<int>()(arr[i], arr[i-1]))
			cout << "insert sort error! " << i << endl;
	}
}
