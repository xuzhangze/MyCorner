#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <pthread.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/stat.h>
#include <netinet/in.h>
#include <signal.h>



#define BACKLOG 10 
#define MAX 1024


int StartUp(int port)
{
	int sock = socket(AF_INET, SOCK_STREAM, 0);
	if(sock == -1)
	{
		perror("socket");
		exit(2);
	}

	struct sockaddr_in local;
	local.sin_family = AF_INET;
	local.sin_addr.s_addr = htonl(INADDR_ANY);
	local.sin_port = htons(port);

    int opt = 1;
    setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt));

	if(bind(sock, (struct sockaddr*)&local, sizeof(local)) == -1)
	{
		perror("bind");
		exit(3);
	}

	if(listen(sock, BACKLOG) == -1)
	{
		perror("listen");
		exit(4);
	}

	return sock;
}

void Usage(const char* argv)
{
	printf("Usage: \n\t%s [port]\n", argv);
}

int Getline(int fd, char buf[])
{
	char ch = 'A';
	int i = 0;
	while(ch != '\n')
	{
		if(read(fd, &ch, 1) < 0)
            return -1;
		if(ch == '\r')
		{
			if(recv(fd, &ch, 1, MSG_PEEK) < 0)
                return -1;
			if(ch == '\n')
			{
				if(read(fd, &ch, 1) < 0)
                    return -1;
			}
			ch = '\n';
		}

		buf[i++] = ch;
	}
    buf[i] = '\0';
	return i;
}

void CleanHead(int fd)
{  
    char buf[MAX];
    Getline(fd, buf);
    while(strcmp(buf, "\n") != 0)
        Getline(fd, buf);
}

void Echo_cgi(int fd, char* method, char* path, char* parameter)
{
    char buf[MAX];
    int content_length = 0;
    char method_env[MAX];
    char parameter_env[MAX];
    char content_length_env[MAX];
    if(strcasecmp(method, "GET") == 0)
        CleanHead(fd);
    else
    {
        while(strncasecmp(buf, "Content-Length: ", 14) != 0)
            Getline(fd, buf);
        content_length = atoi(buf+16);
        CleanHead(fd);
    }
    //printf("method:%s\n", method);
    //printf("path:%s\n", path);
    //printf("length:%d\n", content_length);



/*
    setenv("METHOD", method, 1);
    if(strcasecmp(method, "GET") == 0)
        setenv("PARAMETER", parameter, 1);
    else
        setenv("CONTENT_LENGTH", content_length, 1);
*/
    int input[2];
    int output[2];
    pipe(input);
    pipe(output);
    signal(SIGPIPE, SIG_IGN);

    pid_t pid = fork();
    if(pid < 0)
    {}
    else if(pid > 0)   //父进程
    {
        close(input[0]);
        close(output[1]);
        char ch;
        if(strcasecmp(method, "POST") == 0)
        {
            int i = 0;
            for(; i < content_length; ++i)
            {
                recv(fd, &ch, 1, 0);
                write(input[1], &ch, 1);
            }
        }
        //发送报头
        sprintf(buf, "HTTP/1.0 200 OK\r\n");
        send(fd, buf, strlen(buf), 0);
        sprintf(buf, "Content-Type:text/html;charset=ISO-8859-1\r\n");
        send(fd, buf, strlen(buf), 0);
        sprintf(buf, "\r\n");
        send(fd, buf, strlen(buf), 0);


        while(read(output[0], &ch, 1) > 0)
        {
            //printf("ch:%c\n", ch);
            send(fd, &ch, 1, 0);
        }

        waitpid(pid, NULL, 0);

        close(input[1]);
        close(output[0]);
    }
    else           //子进程
    {
        close(input[1]);
        close(output[0]);
        dup2(input[0], 0);
        dup2(output[1], 1);

        sprintf(method_env, "METHOD=%s", method);
        putenv(method_env);
        if(strcasecmp(method, "GET") == 0)
        {
            sprintf(parameter_env, "PARAMETER=%s", parameter);
            putenv(parameter_env);
        }
        else
        {
            sprintf(content_length_env, "CONTENT_LENGTH=%d", content_length);
            putenv(content_length_env);
        }

        //printf("exec running...\n");   
        //printf("path:%s\n", path);
        //printf("parameter:%s\n", parameter);
        //printf("METHOD:%s\n", getenv("METHOD"));
        //printf("PARAMETER:%s\n", getenv("PARAMETER"));

        execl(path, path, NULL);
        exit(1);
    }
}
void Echo_err(int errcode)
{}

void *Service(void* arg)
{
	int fd = (int)arg;
	char buf[MAX];
	char method[MAX/32];
	char url[MAX];
    char path[MAX];
	int cgi = 0;
	char *parameter = NULL;
    int errcode = 0;
	int i = 0;
#ifdef DEBUG
    do
    {
        Getline(fd, buf);
        printf("%s", buf);
    }while(strcmp(buf, "\n"));
#else
	if(Getline(fd, buf) == -1)
    {
        errcode = 501;
        goto end;
    }

    //取得方法与url
    for(; buf[i] != ' '; ++i)
    {
        method[i] = buf[i];
    }
    method[i++] = 0;
    while(isspace(buf[i]))
        ++i;
    int idx = 0;
    while(buf[i] != ' ')
        url[idx++] = buf[i++];
    url[idx] = 0;

    //解析方法
    if(strcasecmp(method, "GET") == 0)   //GET方法
    {
        parameter = url;
        while(*parameter != '\0')
        {
            if(*parameter == '?')
                break;
            ++parameter;
        }
        if(*parameter == '?')
        {
            *parameter = '\0';
            ++parameter;
            cgi = 1;
        }
    }
    else if(strcasecmp(method, "POST") == 0)  //POST方法
    {
        cgi = 1;
    }
    else
    {
        errcode = 404;
        goto end;
    }

    sprintf(path, "wwwroot%s", url);
    if(path[strlen(path)-1] == '/')
        strcat(path, "home_page.html");
    //printf("method:%s\n", method);
    //printf("path:%s\n", path);
    
    struct stat st;
    if(stat(path, &st) < 0)
    {
        errcode = 404;
        goto end;
    }
    else
    {
        if(S_ISDIR(st.st_mode))
            strcat(path, "home_page.html");
        else if((st.st_mode & S_IXUSR) ||\
               (st.st_mode & S_IXGRP) ||\
               (st.st_mode & S_IXOTH))
            cgi = 1;
        else
        {}
    }

    //处理
    if(cgi)    //cgi模式
    {
        Echo_cgi(fd, method, path, parameter);
    }
    else       //非cgi模式
    {
        //printf("非cgi模式\n");
        char buf[MAX];
        int filefd = open(path, O_RDONLY);
        if(filefd < 0)
        {
            errcode = 404;
            printf("open err\n");
            close(filefd);
            goto end;
        }
        CleanHead(fd);

        sprintf(buf, "HTTP/1.0 200 OK\r\n");
        send(fd, buf, strlen(buf), 0);
        sprintf(buf, "Content-Type:text/html;charset=ISO-8859-1\r\n");
        send(fd, buf, strlen(buf), 0);
        sprintf(buf, "\r\n");
        send(fd, buf, strlen(buf), 0);


        if(sendfile(fd, filefd, NULL, st.st_size) < 0)
            printf("sendfile err\n");

        close(filefd);
    }

#endif
end:
    if(errcode != 200)
        Echo_err(errcode);

    close(fd);
}

int main(int argc, char* argv[])
{
	if(argc != 2)
	{
		Usage(argv[0]);
		exit(1);
	}
	
	int listen_sock = StartUp(atoi(argv[1]));

	for(;;)
	{
	    struct sockaddr_in client_addr;
	    socklen_t len = sizeof(client_addr);
		int client_sock = accept(listen_sock, (struct sockaddr*)&client_addr, &len);
        //printf("get connect, sock:%d\n", client_sock);

		pthread_t tid;
		pthread_create(&tid, NULL, Service, (void*)client_sock);
		pthread_detach(tid);
	}

	return 0;
}
