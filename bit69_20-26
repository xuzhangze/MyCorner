第二十题
#include <stdio.h>
#include <assert.h>

void JudgePalindromic(int number)
{
	int tmp = number;
	int num = 0;
	while(tmp)
	{
		int place = tmp%10;
		tmp /= 10;
		num = num*10+place;
	}
	if(num == number)
		printf("Yes\n");
	else
		printf("No\n");
}


int main()
{
	int number = 0;
	printf("please input number:");
	scanf("%d", &number);
	JudgePalindromic(number);
	return 0;
}

第二十一题
#include <stdio.h>
#include <assert.h>

void JudgePalindromic(const char *str)
{
	assert(NULL != str);
	if('\0' == *str)
	{
		printf("Yes\n");
		return;
	}
	char *pStart = (char*)str;
	char *pTail = (char*)str;
	while(*pTail)
		pTail++;
	pTail--;
	while(pStart < pTail)
	{
		if(*pStart != *pTail)
			break;
		pStart++;
		pTail--;
	}
	if(pStart == pTail || pStart > pTail)
		printf("Yes\n");
	else
		printf("No\n");
}

int main()
{
	char arrstr[20] = { 0 };
	printf("Please input string:");
	scanf("%s", arrstr);
	JudgePalindromic(arrstr);

	return 0;
}

第二十二题
#include <stdio.h>
#include <assert.h>

int * ReverseArray(int *array, const int size)
{
	assert(NULL != array);
	assert(size > 0);
	if(size < 2)
		return array;
	int *pStart = array;
	int *pTail = array + size - 1;
	while(pStart < pTail)
	{
		int tmp = *pStart;
		*pStart = *pTail;
		*pTail = tmp;
		pStart++;
		pTail--;
	}
	return array;
}

int main()
{
	int arr[] = { 1, 3, 4, 5, 6, 7, 8 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	ReverseArray(arr, sz);
	for(int i = 0; i < sz; i++)
		printf("%d ", arr[i]);
	putchar('\n');

	return 0;
}


第二十三题
#include <stdio.h>
#include <assert.h>

void BinarySort(int *array, const int size)
{
	assert(NULL != array && size > 0);
	if(size == 1)
		return;
	for(int i = 0; i < (int)size-1; i++)
	{
		for(int j = (int)size-1; j > i; j--)
		{
			if(array[j] < array[j-1])
			{
				int tmp = array[j];
				array[j] = array[j-1];
				array[j-1] = tmp;
			}
		}
	}
}

int main()
{
	int arr[] = { 4, 6, 8, 9, 2, 7, 5, 3, 0, 1 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	for(int i = 0; i < sz; i++)
		printf("%d ", arr[i]);
	putchar('\n');
	BinarySort(arr, sz);
	for(int i = 0; i < sz; i++)
		printf("%d ", arr[i]);
	putchar('\n');

	return 0;
}

第二十四题
#include <stdio.h>
#include <assert.h>
#include <string.h>
void SortString(char **array, const int size)
{
	assert(NULL != array && size > 0);
	if(size == 1)
		return;
	for(int i = 0; i < (int)size-1; i++)
	{
		for(int j = (int)size-1; j > i; j--)
		{
			if(strcmp(array[j], array[j-1]) < 0)
			{
				char *tmp = array[j];
				array[j] = array[j-1];
				array[j-1] = tmp;
			}
		}
	}
}

int main()
{
	char *arr[] = {"hello", "bit", "teacher", "peter", "world", "how are you"};
	int sz = sizeof(arr) / sizeof(arr[0]);
	for(int i = 0; i < sz; i++)
		printf("%s -> ", arr[i]);
	putchar('\n');
	SortString(arr, sz);
	for(int i = 0; i < sz; i++)
		printf("%s -> ", arr[i]);
	putchar('\n');

	return 0;
}

第二十五题
#include <stdio.h>
#include <assert.h>

int Recursion(int first, int second, int N)
{
	if(N < 3)
		return second;
	return Recursion(second, first+second, --N);
}

int FibRecursion(int N)
{
	assert(N > 0);
	if(N == 1 || N == 2)
		return 1;
	return Recursion(1, 1, N);
}


int main()
{
	int N = 0;
	printf("Please input N:");
	scanf("%d", &N);
	printf("No.%d = %d\n", N, FibRecursion(N));
	return 0;
}


第二十六题
#include <stdio.h>
#include <assert.h>

int FibIteration(int N)
{
	assert(N > 0);
	int first = 1;
	int second = 1;
	for(int i = 2; i < N; i++)
	{
		int sum = first + second;
		first = second;
		second = sum;
	}
	return second;
}

int main()
{
	int N = 0;
	printf("input N:");
	scanf("%d", &N);
	printf("No.%d = %d\n", N, FibIteration(N));
	return 0;
}
