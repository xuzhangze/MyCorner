Makefile：
.PHONY : all
all : server client


server : server.c comm.c
	gcc -o server server.c comm.c

client : client.c comm.c
	gcc -o client client.c comm.c

.PHONY : clean
clean :
	rm -f server client
  
  comm.h：
  #ifndef __COMM_H_
#define __COMM_H_

#include <stdio.h>
#include <sys/msg.h>
#include <sys/ipc.h>
#include <sys/types.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>

#define PATHNAME "./tmp"
#define PROJ_ID 0x6666

#define SERVER_TYPE 1
#define CLIEN_TYPE 2

struct mymsg
{
	long mtype;
	char mtext[1024];
};

int CreatMsgQueue();
int GetMsgQueue();
int DestoryMsgQueue(int msgid);
int SendMsg(int msgid, char *msgp, long msgtype);
int ReceiveMsg(int msgid, void *buf, long msgtype);

#endif

comm.c：
#include "comm.h"

static int _GetCommMsgQueue(int flag)
{
	key_t key = ftok(PATHNAME, PROJ_ID);
	if(key == -1)
	{
		perror("ftok");
		return -1;
	}
	int msg = msgget(key, flag);
	if(msg == -1)
	{
		perror("msgget");
		return -1;
	}
	return msg;
}

int CreatMsgQueue()
{
	return _GetCommMsgQueue(IPC_CREAT|IPC_EXCL|0666);
}
int GetMsgQueue()
{
	return _GetCommMsgQueue(IPC_CREAT);
}

int DestoryMsgQueue(int msgid)
{
	if(msgctl(msgid, IPC_RMID, NULL) == -1)	
	{
		perror("msgctl");
		return -1;
	}
	return 0;
}

int SendMsg(int msgid, char *msgp, long msgtype)
{
	assert(NULL != msgp);
	struct mymsg msg;
	msg.mtype = msgtype;
	strcpy(msg.mtext, msgp);

	if(msgsnd(msgid, (void*)&msg, sizeof(msg.mtext), 0) == -1)
	{
		perror("msgsnd");
		return -1;
	}
	return 0;
}

int ReceiveMsg(int msgid, void *buf, long msgtype)
{
	assert(NULL != buf);
	int size = 0;
	if((size = msgrcv(msgid, buf, 1024, msgtype, 0)) == -1)
	{
		perror("msgrcv");
		return -1;
	}
	return 0;
}

server.c：
#include "comm.h"

int main()
{
	char buf[1024];
	int msgid = CreatMsgQueue();
	if(msgid == -1)
	{
		perror("CreatMsgQueue");
		exit(EXIT_FAILURE);
	}

	while(1)
	{
		memset(buf, 0x00, sizeof(buf));
		if(ReceiveMsg(msgid, (void*)buf, CLIEN_TYPE) == -1)
		{
			perror("ReceiveMsg");
			exit(EXIT_FAILURE);
		}
		if(strcpy(buf, "quit") == 0)
			break;
		printf("cline:>");
		printf("%s", buf);
		memset(buf, 0x00, sizeof(buf));
		printf("sever:>");
		if(read(0, buf, 1024) < 0)
		{
			perror("read");
			exit(EXIT_FAILURE);
		}
		if(SendMsg(msgid, buf, SERVER_TYPE) == -1)
		{
			perror("SendMsg");
			exit(EXIT_FAILURE);
		}
	}

	return 0;
}

client.c：
#include "comm.h"

int main()
{
	char buf[1024];
	int msgid = GetMsgQueue();
	if(msgid == -1)
	{
		perror("GetMsgQueue");
		exit(EXIT_FAILURE);
	}

	while(1)
	{
		memset(buf, 0x00, sizeof(buf));
		printf("cline:>");
		if((read(0, buf, 1024)) < 0)
		{
			perror("ReceiveMsg");
			exit(EXIT_FAILURE);
		}
		if(SendMsg(msgid, buf, SERVER_TYPE) == -1)
		{
			perror("SendMsg");
			exit(EXIT_FAILURE);
		}
		memset(buf, 0x00, sizeof(buf));
		if(ReceiveMsg(msgid, buf, CLIEN_TYPE) == -1)
		{
			perror("ReceiveMsg");
			exit(EXIT_FAILURE);
		}
		printf("sever:>");
		printf("%s", buf);
	}

	return 0;
}
