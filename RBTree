#include <iostream>
using namespace std;

enum Color
{
	RED,
	BLACK	
};
template<typename K, typename V>
struct RBTreeNode
{
	RBTreeNode(K key, V value, Color color = RED)
		; _pLeft(NULL)
		, _pRight(NULL)
		, _pParent(NULL)
		, _key(key)
		, _value(value)
		, _color(color)
	{}
	RBTreeNode<K, V>* _pLeft;
	RBTreeNode<K, V>* _pRight;
	RBTreeNode<K, V>* _pParent;
	K _key;
	V _value;
	Color _color;	
};

template<typename K, typename V>
class RBTree
{
	typedef RBTreeNode<K, V> Node;
	typedef Node* pNode;
public:
	RBTree()
		: _pRoot(NULL)
	{}
	RBTree(K* arrk, size_t size)
		: _pRoot(NULL)
	{
		for(size_t i = 0; i < size; i++)
			Insert(arrk[i], i);	
	}
	void Insert(K key, V value)
	{
		pNode pnewnode = new Node(key, value);
		if(NULL == _pRoot)
		{
			pnewnode->_color = BLACK;
			_pRoot = pnewnode;
		}
		else
		{
			pNode pCur = _pRoot;
			pNode pParent = NULL;
			while(pCur)
			{
				pParent = pCur;
				if(key > pCur->_key)
					pCur = pCur->_pRight;
				else if(key < pCur->_key)
					pCur = pCur->_pLeft;
				else
				{
					delete pnewnode;
					return;
				}
			}
			if(key > pCur->_key)
				pParent->_pRight = pnewnode;
			else
				pParent->_pLeft = pnewnode;
			pnewnode->_pParent = pParent;
			_Adjust(pCur);
		}
	}
	~RBTree()
	{
		if(_pRoot)
			_Destory(_pRoot);
	}

	void PrintRBTree()
	{
		if(_pRoot)
			_InOrder(_pRoot);
	}

private:
	void _InOrder(pNode pRoot)
	{
		if(NULL == pRoot)
			return;
		_InOrder(pRoot->_pLeft);
		cout<< "(" << pRoot->_key << ", " << pRoot->_value << ")" <<endl;
		_InOrder(pRoot->_pRight);
	}
	void _Adjust(pNode pCur)
	{
		if(NULL == pCur)
			return;
		if(NULL == pCur->_pParent)
		{
			pCur->_color = BLACK;
			return;
		}
		if(pCur->_pParent->_color == BLACK)
			return;
		pNode pParent = pCur->_pParent;
		pNode pGroup = pParent->_pParent;
		pNode pUncle = NULL;
		if(pParent == pGroup->_pLeft)
			pUncle = pGroup->_pRight;
		else
			pUncle = pGroup->_pLeft;
		if(pUncle && pUncle->_color == RED)
		{
			pGroup->_color = RED;
			pParent->_color = BLACK;
			pUncle->_color = BLACK;
			_Adjust(pGroup);
		}
		else if(pCur == pParent->_pLeft && pParent == pGroup->_pLeft)
		{
			swap(pParent->_color, pGroup->_color);
			_RotateR(pGroup);
		}
		else if(pCur == pParent->_pRight && pParent == pGroup->_pRight)
		{
			swap(pParent->_color, pGroup->_color);
			_RotateL()
		}
		else if(pCur == pParent->_pRight && pParent == pGroup->_pLeft)
		{
			swap(pCur->_color, pGroup->_color);
			_RotateL(pParent);
			_RotateR(pGroup);		
		}
		else
		{
			swap(pCur->_color, pGroup->_color);
			_RotateR(pParent);
			_RotateL(pGroup);
		}
	}
	
	
	void _RotateR(pNode pRoot)
	{
		if(NULL == pRoot || NULL == pRoot->_pLeft)
			return;
		pNode pLeft = pRoot->_pLeft;
		pNode pParent = pRoot->_pParent;
		if(pParent)
		{
			if(pRoot == pParent->_pLeft)
				pParent->_pLeft = pLeft;
			else
				pParent->_pRight = pLeft;
		}
		pLeft->_pParent = pParent;
		pRoot->_pLeft = pLeft->_pRight;
		if(pLeft->_pRight)
			pLeft->_pRight->_pParent = pRoot;
		pLeft->_pRight = pRoot;
		pRoot->_pParent = pLeft;
	}
	void _RotateL(pNode pRoot)
	{
		if(NULL == pRoot || NULL == pRoot->_pRight)
			return;
		pNode pRight = pRoot->_pRight;
		pNode pParent = pRoot->_pParent;
		if(pParent)
		{
			if(pRoot == pParent->_pLeft)
				pParent->_pLeft = pRight;
			else
				pParent->_pRight = pRight;
		}
		pRight->_pParent = pParent;
		pRoot->_pRight = pRight->_pLeft;
		if(pRight->_pLeft)
			pRight->_pLeft->_pParent = pRoot;
		pRight->_pLeft = pRoot;
		pRoot->_pParent = pRight;
	}
	void _Destory(pNode& pRoot)
	{
		if(NULL == pRoot)
			return;
		_Destory(pRoot->_pLeft);
		_Destory(pRoot->_pRight);
		delete pRoot;
		pRoot = NULL;
	}
private:
	pNode _pRoot;
};
