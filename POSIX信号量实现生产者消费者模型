#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>
#include <semaphore.h>
#include <time.h>

#define BUFSIZE 10

#define ERROR_EXIT(m) \
	do\
	{\
		perror(m);\
		exit(EXIT_FAILURE);\
	}while(0)

sem_t sem_empty;
sem_t sem_num;
pthread_mutex_t mutex;
int i = 0;
int j = 0;

void *Producer1(void *arg)
{
	int *p = (int*)arg;
	int innum = 0;
	while(1)
	{
		innum = rand()%100;
		sem_wait(&sem_empty);
		pthread_mutex_lock(&mutex);
		if(i >= BUFSIZE)
			i = i % BUFSIZE;
		p[i] = innum;
		printf("producer1 : %d, %d\n", innum, i);
		i++;
		pthread_mutex_unlock(&mutex);
		sem_post(&sem_num);
		usleep(500000);
	}
}
void *Producer2(void *arg)
{
	int *p = (int*)arg;
	int innum = 0;
	while(1)
	{
		innum = rand()%100;
		sem_wait(&sem_empty);
		pthread_mutex_lock(&mutex);
		if(i >= BUFSIZE)
			i = i % BUFSIZE;
		p[i] = innum;
		printf("producer2 : %d, %d\n", innum, i);
		i++;
		pthread_mutex_unlock(&mutex);
		sem_post(&sem_num);
		usleep(100000);
	}
}

void *Consumer1(void *arg)
{
	int *p = (int*)arg;
	int outnum;
	while(1)
	{
		sem_wait(&sem_num);
		pthread_mutex_lock(&mutex);
		if(j == BUFSIZE)
			j = j % BUFSIZE;
		outnum = p[j];
		printf("consumer1 : %d, %d\n", outnum, j);
		j++;
		pthread_mutex_unlock(&mutex);
		sem_post(&sem_empty);
		usleep(100000);
	}
}
void *Consumer2(void *arg)
{
	int *p = (int*)arg;
	int outnum;
	while(1)
	{
		sem_wait(&sem_num);
		pthread_mutex_lock(&mutex);
		if(j == BUFSIZE)
			j = j % BUFSIZE;
		outnum = p[j];
		printf("consumer2 : %d, %d\n", outnum, j);
		j++;
		pthread_mutex_unlock(&mutex);
		sem_post(&sem_empty);
		usleep(10000);
	}
}

int main(void)
{
	pthread_t producer1, producer2, consumer1, consumer2;

	srand((unsigned long)time(NULL));

	sem_init(&sem_empty, 0, BUFSIZE);
	sem_init(&sem_num, 0, 0);
	pthread_mutex_init(&mutex, NULL);

	int *p = (int*)malloc(BUFSIZE*sizeof(int));
	if(NULL == p)
		ERROR_EXIT("malloc");
	
	pthread_create(&producer1, NULL, Producer1, (void*)p);
	pthread_create(&producer2, NULL, Producer2, (void*)p);
	pthread_create(&consumer1, NULL, Consumer1, (void*)p);
	pthread_create(&consumer2, NULL, Consumer2, (void*)p);

	pthread_join(producer1, NULL);
	pthread_join(producer2, NULL);
	pthread_join(consumer1, NULL);
	pthread_join(consumer2, NULL);

	free(p);
	sem_destroy(&sem_empty);
	sem_destroy(&sem_num);
	pthread_mutex_destroy(&mutex);


	return 0;
}
