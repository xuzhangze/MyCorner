//第一题
#include <iostream>
using namespace std;
#include<cassert>
#include <cstring>
#include <string>
int Distence(char *strS, char *strT)
{
	assert(NULL != strS && NULL != strT);
	int lenS = strlen(strS);
	int lenT = strlen(strT);
	if (lenS < lenT)
		return -1;
	int count = 0;
	while (*strT)
	{
		if (*strS != *strT)
			count++;
		strS++;
		strT++;
	}
	return count;
}

int SumDistence(string S, string T)
{
	int lengthS = S.length();
	int lengthT = T.length();
	int count = lengthS - lengthT + 1;
	char *pT = new char[lengthT + 1];
	const char *pS = S.c_str();
	int sum = 0;
	for (int i = 0; i < count; i++)
	{
		strncpy(pT, (char*)pS+i, lengthT);
		pT[lengthT] = '\0';
		sum += Distence(pT, (char*)T.c_str());
	}
	delete[] pT;
	return sum;
}

int main()
{
	string str1, str2;
	cin >> str1;
	cin >> str2;
	cout << SumDistence(str1, str2) << endl;


	return 0;
}

//第二题
#include <iostream>
using namespace std;
#include <cstring>
#include <string>

int main()
{
	string str1;
	string str2;
	cin >> str1;
	int size = str1.length();
	int count[10] = { 0 };
	for (int i = 0; i < size; i++)
	{
		if (str1[i] >= '0' && str1[i] <= '9')
		{
			str2.push_back(str1[i]);
			count[str1[i] - '0']++;
		}
	}
	for (int i = 0; i < 10; i++)
	{
		if (count[i] == 0 && i != 0)
		{
			cout << i;
			return 0;
		}
	}
	if (count[0] == 0)
		cout << 10;
	return 0;
}
