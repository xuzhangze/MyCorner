#pragma once

#include <iostream>
using namespace std;
#include <cassert>
#include <ctime>
#include <cstdlib>



template <typename T>
struct Less
{
	bool operator()(T &left, T &right)const
	{
		return left < right;
	}
};

template <typename T>
struct Greater
{
	bool operator()(T &left, T &right)const
	{
		return left > right;
	}
};



#pragma once

#include "compare.hpp"


template <typename T>
void InsertSort(T *array, const int size)
{
	assert(NULL != array && size > 0);
	if(size == 1)
		return;
	for(int i = 1; i < (int)size; i++)
	{
		for(int j = i; j > 0; j--)
		{
			if(Less<T>()(array[j], array[j-1]))
				swap(array[j], array[j-1]);
		}
	}
}


void test1()
{
	int arr[100] = { 0 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	srand((unsigned int)time(0));
	for(int i = 0; i < sz; i++)
	{
		arr[i] = rand() % 100;
	}
	for(int i = 0; i < sz; i++)
		cout << arr[i] << " ";
	cout << endl << endl << endl << "sort:" << endl;
	InsertSort(arr, sz);
	for(int i = 0; i < sz; i++)
		cout << arr[i] << " ";
	cout << endl;
}
