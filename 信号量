Makefile:
.PHONY : all
all : test

test : test.c comm.c
	gcc -o test test.c comm.c

.PHONY : clean
clean :
	rm -f test
  
  comm.h:
  #ifndef __COMM_H_
#define __COMM_H_

#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/sem.h>
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>

#define PATHNAME "."
#define PROJ_ID 0x6666

union semun
{
	int val;
	struct semid_ds *buf;
	unsigned short *array;
	struct seminfo *_buf;
};


int CreatSem(int nsems);
int GetSem(int nsems);
int InitSem(int semid, int nums, int initval);
int DestorySem(int semid);
int P(int semid, int who);
int V(int semid, int who);
#endif //__COMM_H_

comm.c:
#include "comm.h"

static int _GetCommSem(int nsems, int flag)
{
	key_t key = ftok(PATHNAME, PROJ_ID);
	if(key < 0)
	{
		write(1, "ftok\n", strlen("ftok\n"));
		return -1;
	}

	int semid = semget(key, nsems, flag);
	if(semid < 0)
	{
		write(1, "semget\n", strlen("semget\n"));
		return -1;
	}
	return semid;
}

int CreatSem(int nsems)
{
	return _GetCommSem(nsems, IPC_CREAT|IPC_EXCL|0666);
}

int GetSem(int nsems)
{
	return _GetCommSem(nsems, IPC_CREAT);
}

int InitSem(int semid, int nums, int initval)
{
	union semun un;
	un.val = initval;
	if(semctl(semid, nums, SETVAL, un) < 0)
	{
		write(1, "semctl\n", strlen("semctl\n"));
		return -1;
	}
}

int DestorySem(int semid)
{
	if(semctl(semid, 0, IPC_RMID) < 0)
	{
		write(1, "semctl\n", strlen("semctl\n"));
		return -1;
	}
	return 0;
}

static int CommPV(int semid, int who, int op)
{
	struct sembuf sf;
	sf.sem_num = who;
	sf.sem_op = op;
	sf.sem_flg = 0;
	if(semop(semid, &sf, 1) < 0)
	{
		write(1, "semop\n", strlen("semop\n"));
		return -1;
	}
	return 0;
}

int P(int semid, int who)
{
	return CommPV(semid, who, -1);
}

int V(int semid, int who)
{
	return CommPV(semid, who, 1);
}

test.c:
#include "comm.h"

int main()
{
	int semid = CreatSem(1);
	InitSem(semid, 0, 1);
	pid_t pid = fork();
	if(pid < 0)
	{
		perror("fork");
		exit(1);
	}
	else if(pid == 0)
	{//child
		int chsemid = GetSem(0);
		int i = 0;
		while(i++ < 200)
		{
			P(chsemid, 0);
			write(1, "A", strlen("A"));
			//write(1, "A ", strlen("A "));
			printf("A");
			//fflush(stdout);
			usleep(10000);
			//printf("A");
			write(1, "A ", strlen("A "));
			//fflush(stdout);
			usleep(10000);
			V(chsemid, 0);
		}
	}
	else
	{//father
		int i = 0;
		while(i++ < 200)
		{
			P(semid, 0);
			write(1, "B", strlen("B"));
			//write(1, "B ", strlen("B "));
			//printf("B");
			//fflush(stdout);
			usleep(10000);
			//printf("B ");
			write(1, "B ", strlen("B "));
			//fflush(stdout);
			usleep(10000);
			V(semid, 0);
		}
		wait(NULL);
	}
	DestorySem(semid);

	return 0;
}
